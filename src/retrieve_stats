#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import traceback
import unicodecsv
from optparse import OptionParser


ARGS = [
    {
        'val': '--api-endpoint',
        'dest': 'endpoint',
        'action': 'store',
        'help': 'URL of the matomo instance'
    }, {
        'val': '--date',
        'dest': 'date',
        'action': 'store',
        'help': 'reporting date, as YYYY-mm-dd'
    }, {
        'val': '--token',
        'dest': 'token',
        'action': 'store',
        'help': 'token to access matomo API'
    }, {
        'val': '--site-id',
        'dest': 'site_id',
        'action': 'store',
        'help': 'matomo site ID'
    }, {
        'val': '--method',
        'dest': 'method',
        'action': 'store',
        'help': 'API method, e.g. Actions.getPageUrls, Actions.getDownloads'
    }, {
        'val': '--depth',
        'dest': 'depth',
        'action': 'store',
        'help': 'aggregate by URL depth'
    }
]


def print_results(results):
    """Print the column headers, and all the rows of data."""
    def make_rows():
        report = results.get("reports")[0]
        columnHeader = report.get('columnHeader', {})
        dimensionHeaders = columnHeader.get('dimensions', [])
        metricHeaders = columnHeader.get('metricHeader', {}) \
                                    .get('metricHeaderEntries', [])
        yield dimensionHeaders + [m.get("name") for m in metricHeaders]
        for row in report.get('data').get('rows', []):
            vals = row.get('dimensions') + row.get('metrics')[0].get('values')
            yield [cell.encode("utf8") for cell in vals]

    w = unicodecsv.writer(sys.stdout)
    for output in make_rows():
        w.writerow(output)


def get_statistics(request):
    req = "%s?title=%s&filter=uri_scheme:%s,%s&strict=%s" \
          % (URI_API_ENDP, title, URI_SCHEME, TYPES, URI_STRICT)
    h = httplib2.Http()
    res, content = h.request(req, 'GET')
    try:
        assert res.status == 200
    except AssertionError:
        r = json.loads(content.decode('utf-8'))
        m = "%s: %s (%s)" % (r['message'], r['parameters']['title'], timestamp)
        print(m, file=sys.stderr)
        return []
    entry = json.loads(content.decode('utf-8'))['data']
    CACHE[title] = entry
    return entry


def print_csv(endpoint, token, site_id, date, method, depth):
    request = build_request(endpoint, token, site_id, date, method, depth)
    results = get_statistics(request)
    print_results(results)
    sys.exit(0)


def get_options(args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg['val'], dest=arg['dest'],
                          action=arg['action'], help=arg['help'])
    options, rest = parser.parse_args()

    required = all([options.endpoint, options.date, options.token,
                    options.site_id, options.method])
    if not rest == [] or not required:
        m = 'Missing api-endpoint, date, token, site-id or method.'
        print(m, file=sys.stderr)
        sys.exit(1)
    return options


def run():
    sys.stdin.close()
    options = get_options(ARGS)

    print_csv(options.endpoint, options.token, options.site_id, options.date,
              options.method, options.depth)


if __name__ == '__main__':
    run()
