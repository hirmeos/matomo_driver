#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import json
import httplib2
from optparse import OptionParser


ARGS = [
    {
        'val': '--api-endpoint',
        'dest': 'endpoint',
        'action': 'store',
        'help': 'URL of the matomo instance'
    }, {
        'val': '--date',
        'dest': 'date',
        'action': 'store',
        'help': 'reporting date, as YYYY-mm-dd'
    }, {
        'val': '--matomo-token',
        'dest': 'token',
        'action': 'store',
        'help': 'token to access matomo API'
    }, {
        'val': '--site-id',
        'dest': 'site_id',
        'action': 'store',
        'help': 'matomo site ID'
    }, {
        'val': '--method',
        'dest': 'method',
        'action': 'store',
        'help': 'API method, e.g. Actions.getPageUrls, Actions.getDownloads'
    }, {
        'val': '--depth',
        'dest': 'depth',
        'action': 'store',
        'help': 'aggregate by URL depth'
    }, {
        'val': '--segment',
        'dest': 'segment',
        'action': 'store',
        'help': 'Regex to filter responses, e.g. '
        '^https%253A%252F%252Fopenbookpublishers.com%252Fhtmlreader'
    }
]


def get_options(args):
    parser = OptionParser()
    for arg in args:
        parser.add_option(arg['val'], dest=arg['dest'],
                          action=arg['action'], help=arg['help'])
    options, rest = parser.parse_args()

    required = all([options.endpoint, options.date, options.token,
                    options.site_id, options.method])
    if not rest == [] or not required:
        m = 'Missing api-endpoint, date, token, site-id or method.'
        print(m, file=sys.stderr)
        sys.exit(1)
    return options


def get_statistics(url, date=''):
    h = httplib2.Http()
    res, content = h.request(url, 'GET')
    if not res.status == 200:
        m = "Failed to retrieve report for date '%s'." % (date)
        print(m, file=sys.stderr)
        return []
    return json.loads(content.decode('utf-8'))


def build_request(endpoint, token, site_id, date, method, depth, segment):
    return (f'{endpoint}?module=API'
            f'&method={method}'
            f'&idSite={site_id}'
            f'&token_auth={token}'
            f'&depth={depth}'
            f'&date={date}'
            f'&segment=pageUrl={segment}'
            f'&period=day'
            f'&format=JSON'
            f'&expanded=1'
            f'&flat=1')


def print_report(endpoint, token, site_id, date, method, depth, segment):
    request = build_request(endpoint, token, site_id, date, method, depth,
                            segment)
    results = get_statistics(request, date)
    if results:
        json.dump(results, sys.stdout)
    sys.exit(0)


def run():
    sys.stdin.close()
    options = get_options(ARGS)

    print_report(options.endpoint, options.token, options.site_id,
                 options.date, options.method, options.depth, options.segment)


if __name__ == '__main__':
    run()
